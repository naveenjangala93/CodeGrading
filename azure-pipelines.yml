#Testing about CI

trigger:
- main

pool:
  vmImage: 'windows-latest'

steps:
- powershell: |
    $filePath = "Common"
    if (-not (Test-Path $filePath)) {
        Write-Output "The file '$filePath' does not exist."
        exit 1  # Fail the task
    } else {
        Write-Output "The file '$filePath' exists."
    }
  displayName: 'Check File Existence'

  
# - task: PowerShell@2
#   displayName: 'Send POST Request'
#   inputs:
#     targetType: inline
#     script: |
#         # Define the URL for the POST request
#         $uri = "https://codeanalysis.azurewebsites.net/CodeAnalysis/Post"

#         # Define the JSON payload to send in the request body
#         $jsonPayload = @{
#             key1 = "Naveen Nithish"
#             key2 = "How *Le's"
#             # Add more key-value pairs as needed for your API
#         } | ConvertTo-Json

#         # Send the POST request with the JSON payload
#         try {
#             $response = Invoke-RestMethod -Uri $uri -Method Post -ContentType 'application/json' -Body $jsonPayload

#             # Output the response from the API
#             echo $response
#         } catch {
#             # Handle any exceptions that occur during the API request
#             Write-Error "Failed to send POST request: $_"
#             exit 1  # Fail the task if the requestÂ fails
#         }
  
  
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      # Define the base URL of the API
      $baseUri = "https://codeanalysis.azurewebsites.net/CodeAnalysis/Post"
      
      # Define the data to send
      $data = @{
          name = "naveen"
          age = "20"
      }

      # Construct the query string
      $queryString = [System.Web.HttpUtility]::ParseQueryString("")
      foreach ($key in $data.Keys) {
          $queryString.Set($key, $data[$key])
      }
      
      # Combine the base URL with the query string
      $uri = $baseUri + "?" + $queryString.ToString()

      # Send the GET request
      try {
          $response = Invoke-RestMethod -Uri $uri -Method Get
          
          # Check if the response contains valid data
          if ($response) {
              Write-Host "Data is valid. Response: $($response | ConvertTo-Json -Depth 5)"
          } else {
              Write-Host "No data received or invalid response."
          }
      } catch {
          Write-Host "Error occurred: $_"
      }

- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '**/*.csproj'

# - task: DotNetCoreCLI@2
#   inputs:
#     command: 'test'
#     projects: '**/sampletesting.UnitTest/*.csproj'
#         # arguments: '--configuration release --output $(Build.ArtifactStagingDirectory) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'
#     # publishTestResults: true
#     arguments: '--configuration $(BuildConfiguration) --collect:"Code coverage"'
#     publishTestResults: true
#     publishCodeCoverage: true

  
# - task: PublishCodeCoverageResults@2
#   inputs:
#     # codeCoverageTool: 'Cobertura'
#     summaryFileLocation: '**/*coverage.cobertura.xml'
    
- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: '**/*.csproj'
    arguments: '--configuration release --output $(Build.ArtifactStagingDirectory) '
    condition: always()
    
# - task: CopyFiles@2
#   inputs:
#     Contents: '/*.dll'
#     TargetFolder: '$(build.artifactstagingdirectory)'
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'dll_file'
    publishLocation: 'Container'




# - task: PowerShell@2
#   inputs: 
#     targetType: inline
#     script: |
#         $uri = "https://codeanalysis.azurewebsites.net/CodeAnalysis/Get"
#         $response = Invoke-RestMethod -Uri $uri -Method Get
#         echo $response

